// Importa as fun√ß√µes necess√°rias do Deno e do Supabase
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';
// Define os headers de CORS para permitir que a API seja chamada de qualquer origem
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};
// Inicia o servidor da Edge Function, que escutar√° por requisi√ß√µes
serve(async (req)=>{
  // Loga a chegada de qualquer requisi√ß√£o para fins de debug
  console.log('üîå Webhook recebido:', req.method, req.url);
  // O navegador envia uma requisi√ß√£o OPTIONS antes de um POST para verificar as permiss√µes de CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }
  try {
    // Inicializa o cliente do Supabase para interagir com o banco de dados
    const supabase = createClient(Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '');
    // L√™ e interpreta o corpo da requisi√ß√£o como JSON
    const payload = await req.json();
    console.log('üì® Payload recebido:', JSON.stringify(payload, null, 2));
    // --- In√≠cio das Valida√ß√µes e Filtros Essenciais ---
    // Filtro 1: Ignora qualquer evento que n√£o seja uma nova mensagem (`messages.upsert`)
    // ou qualquer mensagem que tenha sido enviada por voc√™ mesmo (`fromMe: true`)
    if (payload.event !== 'messages.upsert' || payload.data.key.fromMe) {
      console.log('‚ö†Ô∏è Evento ignorado - n√£o √© uma nova mensagem de usu√°rio.');
      return new Response(JSON.stringify({
        success: true,
        message: 'Evento ignorado.'
      }), {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
    // Filtro 2: Extrai o texto da mensagem de forma segura e ignora se estiver vazia
    const messageText = (payload.data.message?.conversation || payload.data.message?.extendedTextMessage?.text || '').trim();
    if (!messageText) {
      console.log('‚ö†Ô∏è Mensagem recebida sem conte√∫do de texto.');
      return new Response(JSON.stringify({
        success: true,
        message: 'Mensagem sem texto.'
      }), {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
 const normalizarTexto = (messageText: any) => {
  return messageText.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim();
};

const confirmacoes = new Set([
  '1', 'sim', 's', 'ok', 'confirmo', 'confirmado', 'confirma', 'certo',
  'combinado', 'fechado', 'positivo', 'afirmativo', 'isso', 'correto',
  'exato', 'exatamente',

  // Formais / Educados
  'confirmo sim', 'sim confirmo', 'sim confirmado', 'confirmado, obrigado',
  'est√° confirmado', 'eu confirmo', 'quero confirmar sim', 'pode confirmar',
  'presen√ßa confirmada', 'confirmo a presen√ßa', 'de acordo',

  // Informais / G√≠rias
  'blz', 'blza', 'beleza', 'fmz', 'firmeza', 'pdc', 'pode crer', 'demorou',
  'ja e', 'j√° √©', 'fechou', 'show', 'top', 'joia', 'joinha', 'claro', 'com certeza',
  'certeza', 'sem duvida', 'pode pa', 'ta certo', 'ta ok', 't√° ok', 't√° certo',
  'pode contar', 'tamo junto',

  // Respostas a perguntas de confirma√ß√£o
  'vou', 'quero', 'irei', 'comparecerei', 'estarei presente', 'estarei a√≠', 'estarei ai',

  // Varia√ß√µes com erros de digita√ß√£o comuns
  'sin', 'si', 'simm', 'confimado', 'comfirmado', 'okey', 'ok,', 'concerteza',
  'confermo', 'confirnado', 'beleca', 'belza', 'fechadooo',
  'vlw', 'üëç', 'üëçüèª', 'üëçüèº', 'üëçüèΩ', 'üëçüèæ', 'üëçüèø', 'üëå', 'üëåüèª', 'üëåüèº', 'üëåüèΩ', 'üëåüèæ', 'üëåüèø',
  '‚úÖ', '‚úîÔ∏è', 'üÜó', '‚úî', '‚òë', 'ü§ô', 'üòâ', 'üòä', 'üôÇ', 'üòÉ', 'üòÑ'
]);

const cancelamentos = new Set([
'2', 'n√£o', 'nao', 'n', 'cancelo', 'cancelar', 'cancelado', 'errado',
  'incorreto', 'negativo', 'jamais',

  // Formais / Educados
  'quero cancelar', 'pode cancelar', 'n√£o poderei ir', 'nao poderei ir',
  'infelizmente n√£o poderei', 'infelizmente nao poderei', 'solicito o cancelamento',
  'pe√ßo para cancelar', 'gostaria de cancelar',

  // Informais
  'n√£o vou', 'nao vou', 'n√£o quero', 'nao quero', 'n√£o vai dar', 'nao vai dar',
  'deixa pra proxima', 'deixa para a pr√≥xima', 'foi mal', 'nem rola', 'sem chance',
  'dispenso', 'n√£o, obrigado', 'nao, obrigado',

  // Relacionados a imprevistos
  'imprevisto', 'tive um imprevisto', 'n√£o consigo', 'nao consigo', 'n√£o posso',
  'nao posso', 'n√£o poderei comparecer', 'nao poderei comparecer',

  // Varia√ß√µes com erros de digita√ß√£o
  'naum', '√±', 'nao posso ir', 'canselar', 'cancel√°', 'can√ßelar', 'cancelado',
  'nao vai da', 'imprevisto',

  // Emojis
  'üëé', 'üëéüèª', 'üëéüèº', 'üëéüèΩ', 'üëéüèæ', 'üëéüèø', // Joinha para baixo
  '‚ùå', '‚úñ', '‚ùé', '‚úñÔ∏è',                   // Xis / Errado
  'üö´',                                  // Proibido
]);

const mensagemPaciente = messageText; // Sua vari√°vel com a mensagem
const mensagemNormalizada = normalizarTexto(mensagemPaciente);

let isConfirmation = confirmacoes.has(mensagemNormalizada);
let isCancellation = cancelamentos.has(mensagemNormalizada);

if (!isConfirmation && !isCancellation) {
  // Verifica se a frase cont√©m palavras-chave
  const contemConfirmacao = [
  'confirmo',
  'confirmado',
  'confirma',  // A raiz 'confirm' √© √≥tima
  'estarei presente',
  'estarei ai',
  'com certeza',
  'pode contar',
  'tudo certo',
  'presen√ßa confirmada',
  'manter o agendamento', // Captura frases como "gostaria de manter o agendamento"
  'ta combinado',
  'ta fechado'
].some(palavra => mensagemNormalizada.includes(palavra));
  const contemCancelamento = [
  'cancelar',   // A raiz 'cancel' √© a mais importante
  'cancela',
  'desmarcar',
  'remarcar',  // "Remarcar" implica o cancelamento do hor√°rio atual
  'nao posso ir',
  'nao poderei',
  'nao consigo',
  'nao vai dar',
  'nao tenho como ir',
  'outro dia',
  'outra data',
  'tive um imprevisto',
  'nao comparecerei'
].some(palavra => mensagemNormalizada.includes(palavra));

  if (contemConfirmacao && !contemCancelamento) {
      isConfirmation = true;
  } else if (contemCancelamento && !contemConfirmacao) {
      isCancellation = true;
  }
}
    if (!isConfirmation && !isCancellation) {
      console.log('‚ö†Ô∏è Resposta inv√°lida, n√£o √© 1 ou 2:', messageText);
      return new Response(JSON.stringify({
        success: true,
        message: 'Resposta n√£o process√°vel.'
      }), {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
    console.log(`‚úÖ Resposta v√°lida recebida: "${messageText}"`);
    // --- In√≠cio do Processamento da L√≥gica Principal ---
    // Limpa o n√∫mero de telefone do remetente para o formato usado no banco de dados
    const remoteJid = payload.data.key.remoteJid;
    const phoneWithCountryCode = remoteJid.match(/\d+/)?.[0] || '';
    let cleanPhone = phoneWithCountryCode.startsWith('55') ? phoneWithCountryCode.substring(2) : phoneWithCountryCode;
    // Gera varia√ß√µes do n√∫mero para busca
    const variations = new Set();
    variations.add(cleanPhone);
    // Adiciona/remover 9 ap√≥s DDD (para celulares)
    if (cleanPhone.length === 10) {
      // Ex: 6696525791 ‚Üí 66996525791
      variations.add(cleanPhone.slice(0, 2) + '9' + cleanPhone.slice(2));
    }
    if (cleanPhone.length === 11 && cleanPhone[2] === '9') {
      // Ex: 66996525791 ‚Üí 6696525791
      variations.add(cleanPhone.slice(0, 2) + cleanPhone.slice(3));
    }
    // Adiciona varia√ß√µes com 55
    for (const v of Array.from(variations)){
      if (!v.startsWith('55')) variations.add('55' + v);
    }
    // --- SOLU√á√ÉO 3: Busca TODOS os pacientes com aquele telefone ---
    console.log('üîç SOLU√á√ÉO 3: Buscando TODOS os pacientes com as varia√ß√µes de telefone...');
    
    let allPatientsFound = [];
    let patientError = null;
    
    // Busca todos os pacientes com qualquer varia√ß√£o do telefone
    for (const phone of variations) {
      const { data, error } = await supabase
        .from('patients')
        .select('id, full_name, clinic_id')
        .eq('phone', phone);
        
      if (data && data.length > 0) {
        allPatientsFound.push(...data);
      }
      if (error) patientError = error;
    }
    
    console.log('üë• Pacientes encontrados com este telefone:', {
      total: allPatientsFound.length,
      pacientes: allPatientsFound.map((p: any) => ({
        id: p.id,
        nome: p.full_name,
        clinic_id: p.clinic_id
      }))
    });
    
    if (allPatientsFound.length === 0) {
      console.error('‚ö†Ô∏è Nenhum paciente encontrado no banco de dados (testadas varia√ß√µes):', Array.from(variations).join(', '), patientError);
      return new Response(JSON.stringify({
        success: false,
        message: 'Paciente n√£o encontrado.'
      }), {
        status: 404,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
    
    // Agora tenta encontrar qual paciente tem agendamentos pendentes
    console.log('üîÑ Testando cada paciente para encontrar agendamentos pendentes...');
    
    let patientData = null;
    let foundAppointments = null;
    
    // Definir datas de busca
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const currentTime = now.toTimeString().split(' ')[0].substring(0, 5); // HH:MM format
    
    const searchUntil = new Date();
    searchUntil.setDate(searchUntil.getDate() + 14);
    const dateLimit = searchUntil.toISOString().split('T')[0];
    
    console.log(`‚è∞ Filtro temporal: Hoje: ${today} ${currentTime}, At√©: ${dateLimit}`);
    
    for (const patient of allPatientsFound) {
      console.log(`üîç Testando paciente: ${patient.full_name} (ID: ${patient.id}, Cl√≠nica: ${patient.clinic_id})`);
      
      // Busca agendamentos para este paciente
      const { data: patientAppointments, error: appointmentError } = await supabase
        .from('appointments')
        .select('id, date, time, professional_id, clinic_id, status')
        .eq('patient_id', patient.id)
        .gte('date', today)
        .lte('date', dateLimit)
        .eq('status', 'marcado')
        .order('date', { ascending: true })
        .order('time', { ascending: true });
      
      // Filtrar apenas agendamentos futuros (considerando data E hora)
      const futureAppointments = patientAppointments?.filter((apt: any) => {
        const aptDateTime = `${apt.date} ${apt.time}`;
        const nowDateTime = `${today} ${currentTime}`;
        return aptDateTime > nowDateTime;
      }) || [];
        
      console.log(`üìã Agendamentos encontrados para ${patient.full_name}:`, {
        total: futureAppointments.length,
        todosAgendamentos: patientAppointments?.length || 0,
        agendamentosFuturos: futureAppointments.map((apt: any) => ({
          id: apt.id,
          date: apt.date,
          time: apt.time,
          clinic_id: apt.clinic_id
        }))
      });
      
      // Se encontrou agendamentos FUTUROS para este paciente, usa ele
      if (futureAppointments.length > 0) {
        patientData = patient;
        foundAppointments = futureAppointments;
        console.log(`‚úÖ Paciente com agendamentos futuros encontrado: ${patient.full_name} (${futureAppointments.length} agendamentos)`);
        break;
      } else if (patientAppointments && patientAppointments.length > 0) {
        console.log(`‚ö†Ô∏è Paciente ${patient.full_name} tem agendamentos, mas todos j√° passaram`);
      }
    }
    
    if (!patientData || !foundAppointments) {
      console.log('‚ö†Ô∏è Nenhum dos pacientes encontrados possui agendamentos pendentes no per√≠odo.');
      return new Response(JSON.stringify({
        success: false,
        message: 'Nenhum agendamento pendente encontrado para este telefone.',
        debug: {
          patientsFound: allPatientsFound.length,
          searchPeriod: `${today} a ${dateLimit}`
        }
      }), {
        status: 404,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
    
    console.log('‚úÖ Paciente selecionado para processamento:', {
      id: patientData.id,
      name: patientData.full_name,
      clinic_id: patientData.clinic_id,
      appointmentsFound: foundAppointments.length
    });

    // Usa os agendamentos j√° encontrados
    const appointments = foundAppointments;
    // Pega o agendamento mais pr√≥ximo da lista para evitar ambiguidade
    const appointmentToUpdate = appointments[0];
    const newStatus = isConfirmation ? 'confirmado' : 'cancelado';
    console.log(`üîÑ Atualizando agendamento [${appointmentToUpdate.id}] para status: ${newStatus}`);
    // Atualiza o agendamento no banco de dados
    const { error: updateError } = await supabase.from('appointments').update({
      status: newStatus,
      whatsapp_confirmed: isConfirmation,
      patient_confirmed_at: new Date().toISOString()
    }).eq('id', appointmentToUpdate.id);
    if (updateError) {
      console.error('‚ùå Erro ao atualizar agendamento:', updateError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erro ao atualizar agendamento.'
      }), {
        status: 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      });
    }
    console.log('‚úÖ Agendamento atualizado com sucesso no banco de dados.');
    
    // Registrar mensagem recebida do paciente no whatsapp_logs
    console.log('üìù Registrando mensagem recebida do paciente no log...');
    const { error: logReceivedError } = await supabase.from('whatsapp_logs').insert({
      appointment_id: appointmentToUpdate.id,
      patient_phone: cleanPhone,
      message_type: 'response_received',
      message_content: `Resposta do paciente: ${messageText}`,
      status: 'delivered',
      response_content: isConfirmation ? 'Confirmado' : 'Cancelado',
      sent_at: new Date().toISOString(),
      clinic_id: patientData.clinic_id
    });
    
    if (logReceivedError) {
      console.warn('‚ö†Ô∏è Erro ao registrar mensagem recebida no log:', logReceivedError);
    } else {
      console.log('‚úÖ Mensagem recebida registrada no log');
    }
    
    // --- In√≠cio do Envio de Notifica√ß√µes de Feedback ---
    // Busca dados do profissional e configura√ß√µes da API em paralelo para maior efici√™ncia
    console.log(`üîç Buscando configura√ß√µes WhatsApp para a cl√≠nica: ${patientData.clinic_id}`);
    const [professionalResult, settingsResult] = await Promise.all([
      supabase.from('professionals').select('full_name, phone').eq('id', appointmentToUpdate.professional_id).single(),
      supabase.from('whatsapp_settings').select('base_url, instance_name, api_key').eq('clinic_id', patientData.clinic_id).eq('is_active', true).single()
    ]);
    const professional = professionalResult.data;
    const settings = settingsResult.data;
    
    console.log('üìÑ Resultados da busca:', {
      professional: professional ? { name: professional.full_name, hasPhone: !!professional.phone } : 'N√£o encontrado',
      settings: settings ? { hasApiKey: !!settings.api_key, instance: settings.instance_name } : 'N√£o encontrado',
      professionalError: professionalResult.error,
      settingsError: settingsResult.error
    });
    
    // Apenas tenta enviar mensagens se houver uma configura√ß√£o de API ativa
    if (settings?.api_key) {
      const appointmentDateFormatted = new Date(appointmentToUpdate.date).toLocaleDateString('pt-BR');
      
      // 1. Envia feedback para o PACIENTE
      const patientFeedbackMessage = isConfirmation 
        ? `‚úÖ Obrigado! \n Sua consulta para ${appointmentDateFormatted} √†s ${appointmentToUpdate.time} est√° *CONFIRMADA*.` 
        : `‚úÖ Entendido. \n Sua consulta para ${appointmentDateFormatted} √†s ${appointmentToUpdate.time} foi *CANCELADA*.`;
      
      const patientPhone = '55' + cleanPhone;
      
      console.log('üì§ Enviando feedback para paciente:', {
        phone: patientPhone,
        message: patientFeedbackMessage.substring(0, 50) + '...',
        apiUrl: `${settings.base_url}/message/sendText/${settings.instance_name}`
      });
      
      try {
        const patientResponse = await fetch(`${settings.base_url}/message/sendText/${settings.instance_name}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': settings.api_key
          },
          body: JSON.stringify({
            number: patientPhone,
            text: patientFeedbackMessage
          })
        });
        
        const patientResponseData = await patientResponse.json();
        
        if (patientResponse.ok) {
          console.log('‚úÖ Feedback enviado para o paciente com sucesso:', patientResponseData);
          
          // Registrar feedback enviado ao paciente no whatsapp_logs
          const messageId = patientResponseData?.key?.id || patientResponseData?.message?.key?.id;
          await supabase.from('whatsapp_logs').insert({
            appointment_id: appointmentToUpdate.id,
            patient_phone: cleanPhone,
            message_type: isConfirmation ? 'confirmation_feedback' : 'cancellation_feedback',
            message_content: patientFeedbackMessage,
            status: 'delivered',
            evolution_message_id: messageId,
            sent_at: new Date().toISOString(),
            clinic_id: patientData.clinic_id
          });
          console.log('‚úÖ Feedback ao paciente registrado no log');
        } else {
          console.error('‚ö†Ô∏è Falha ao enviar feedback para o paciente. Status:', patientResponse.status, 'Resposta:', patientResponseData);
        }
      } catch (err) {
        console.error('‚ùå Erro de rede ao enviar feedback para o paciente:', err);
      }
      
      // 2. Envia notifica√ß√£o para o FISIOTERAPEUTA
      if (professional?.phone) {
        const statusMessage = isConfirmation ? '‚úÖ CONFIRMADA' : '‚ùå CANCELADA';
        const physioMessage = `*ATUALIZA√á√ÉO DE CONSULTA* ${statusMessage}\n\nüë§ *Paciente:* ${patientData.full_name}\nüìÖ *Data:* ${appointmentDateFormatted}\nüïê *Hor√°rio:* ${appointmentToUpdate.time}\n\nO paciente respondeu via WhatsApp.`;
        const physioPhone = '55' + professional.phone.replace(/\D/g, '');
        
        console.log('üì§ Enviando notifica√ß√£o para fisioterapeuta:', {
          phone: physioPhone,
          professional: professional.full_name
        });
        
        try {
          const physioResponse = await fetch(`${settings.base_url}/message/sendText/${settings.instance_name}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'apikey': settings.api_key
            },
            body: JSON.stringify({
              number: physioPhone,
              text: physioMessage
            })
          });
          
          const physioResponseData = await physioResponse.json();
          
          if (physioResponse.ok) {
            console.log('‚úÖ Fisioterapeuta notificado com sucesso:', physioResponseData);
            
            // Registrar notifica√ß√£o ao fisioterapeuta no whatsapp_logs
            const messageId = physioResponseData?.key?.id || physioResponseData?.message?.key?.id;
            await supabase.from('whatsapp_logs').insert({
              appointment_id: appointmentToUpdate.id,
              patient_phone: professional.phone.replace(/\D/g, ''), // Telefone do profissional
              message_type: 'professional_notification',
              message_content: physioMessage,
              status: 'delivered',
              evolution_message_id: messageId,
              sent_at: new Date().toISOString(),
              clinic_id: patientData.clinic_id
            });
            console.log('‚úÖ Notifica√ß√£o ao fisioterapeuta registrada no log');
          } else {
            console.error('‚ö†Ô∏è Falha ao notificar fisioterapeuta. Status:', physioResponse.status, 'Resposta:', physioResponseData);
          }
        } catch (err) {
          console.error('‚ùå Erro de rede ao notificar fisioterapeuta:', err);
        }
      }
    }
    /* // Bloco de log que estava dando erro, desativado conforme solicitado.
    // Para reativar, corrija o valor de 'message_type' para um que seja aceito
    // pela sua tabela 'whatsapp_logs'.
    const logMessageType = isConfirmation ? 'confirmation_response' : 'cancellation_response';
    const actionTaken = isConfirmation ? 'confirmed' : 'cancelled';
    const { error: logError } = await supabase.from('whatsapp_logs').insert({
        appointment_id: appointmentToUpdate.id,
        patient_phone: cleanPhone,
        message_type: logMessageType,
        message_content: messageText,
        status: 'processed',
        evolution_message_id: payload.data.key.id,
        response_content: actionTaken
    });
    if (logError) { console.error('‚ö†Ô∏è Erro ao salvar log (n√£o cr√≠tico):', logError); }
    */ // --- Finaliza√ß√£o ---
    console.log('üéâ Processamento do webhook conclu√≠do com sucesso!');
    // Retorna uma resposta de sucesso para a Evolution API, finalizando a requisi√ß√£o.
    return new Response(JSON.stringify({
      success: true,
      message: `Agendamento ${newStatus} com sucesso.`
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    // Se ocorrer qualquer erro inesperado n√£o tratado, ele ser√° capturado aqui.
    console.error('‚ùå Erro cr√≠tico no webhook:', error);
    return new Response(JSON.stringify({
      success: false,
      error: 'Erro interno do servidor.'
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
});

