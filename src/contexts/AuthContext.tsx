import React, { createContext, useContext, useEffect, useState, useCallback, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Session, User } from '@supabase/supabase-js';
import { Database } from '@/integrations/supabase/types';
import { toast } from 'sonner';
import { globalCache } from '@/lib/globalCache';

// --- TIPAGEM ---
type Profile = Database['public']['Tables']['profiles']['Row'];

export type AppUser = User & {
  profile: Profile | null;
  clinicId: string | null;
};

interface AuthContextType {
  session: Session | null;
  user: AppUser | null;
  loading: boolean;
  clinicId: string | null;
  clinicCode: string | null;
  redirectTo: string | null;
  setRedirectTo: (path: string | null) => void;
  clearRedirectTo: () => void;
  signIn: (email: string, password: string, clinicCode: string) => Promise<{ error: any; isSuperAdmin?: boolean }>;
  register: (email: string, password: string, userData: any) => Promise<{ error: any }>;
  signUp: (email: string, password: string, userData: any) => Promise<{ error: any; data?: any }>;
  signOut: () => Promise<void>;
  forceReauth: () => void;
  refreshAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// ‚úÖ Fun√ß√µes utilit√°rias
const cleanupAuthState = () => {
  console.log('üßπ Limpando estado de autentica√ß√£o...');
  localStorage.removeItem('supabase.auth.token');
  localStorage.removeItem('auth_user_data'); // ‚úÖ Remover dados persistidos
  sessionStorage.clear();
};

// ‚úÖ Salvar dados cr√≠ticos no localStorage
const persistUserData = (user: AppUser | null) => {
  if (user && user.profile) {
    const criticalData = {
      userId: user.id,
      email: user.email,
      profileId: user.profile.id,
      clinicId: user.profile.clinic_id,
      clinicCode: user.profile.clinic_code,
      role: user.profile.role,
      fullName: user.profile.full_name,
      timestamp: Date.now()
    };
    localStorage.setItem('auth_user_data', JSON.stringify(criticalData));
    console.log('üíæ Dados cr√≠ticos salvos no localStorage:', criticalData);
  }
};

// ‚úÖ Recuperar dados cr√≠ticos do localStorage
const loadPersistedUserData = () => {
  try {
    const stored = localStorage.getItem('auth_user_data');
    if (stored) {
      const data = JSON.parse(stored);
      // Verificar se n√£o expirou (24 horas)
      const age = Date.now() - data.timestamp;
      if (age < 24 * 60 * 60 * 1000) {
        console.log('‚úÖ Dados cr√≠ticos recuperados do localStorage:', data);
        return data;
      } else {
        console.log('‚è∞ Dados persistidos expiraram');
        localStorage.removeItem('auth_user_data');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao recuperar dados persistidos:', error);
  }
  return null;
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<AppUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [redirectTo, setRedirectToState] = useState<string | null>(null);
  
  const isInitialized = useRef(false);
  const isLoggingOut = useRef(false); // ‚úÖ PROTE√á√ÉO: Flag para evitar logout duplicado
  const lastProcessedSessionId = useRef<string | null>(null); // ‚úÖ Rastrear √∫ltimo userId processado

  const setRedirectTo = useCallback((path: string | null) => {
    setRedirectToState(path);
    if (path) {
      localStorage.setItem('auth_redirect_to', path);
    } else {
      localStorage.removeItem('auth_redirect_to');
    }
  }, []);

  const clearRedirectTo = useCallback(() => {
    setRedirectToState(null);
    localStorage.removeItem('auth_redirect_to');
  }, []);

  // Fun√ß√£o auxiliar para buscar o perfil e anexar ao usu√°rio
  const getProfileAndClinicId = useCallback(async (supabaseUser: User | null): Promise<AppUser | null> => {
    if (!supabaseUser) {
      return null;
    }

    const { data: profileData, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', supabaseUser.id)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error("‚ùå Erro ao buscar perfil:", error);
      
      // ‚úÖ FALLBACK: Tentar usar dados persistidos
      const persistedData = loadPersistedUserData();
      if (persistedData && persistedData.userId === supabaseUser.id) {
        console.log('üîÑ Usando dados persistidos como fallback');
        const appUser: AppUser = {
          ...supabaseUser,
          profile: {
            id: persistedData.profileId,
            clinic_id: persistedData.clinicId,
            clinic_code: persistedData.clinicCode,
            role: persistedData.role,
            full_name: persistedData.fullName,
            email: persistedData.email,
          } as Profile,
          clinicId: persistedData.clinicId,
        };
        return appUser;
      }
    }

    const appUser: AppUser = {
      ...supabaseUser,
      profile: profileData || null,
      clinicId: profileData?.clinic_id || null,
    };
    
    // Atualizar profile state
    setProfile(profileData || null);
    
    return appUser;
  }, []);

  // ‚úÖ Fun√ß√£o para buscar cl√≠nica pelo c√≥digo
  const fetchClinicDataByCode = useCallback(async (code: string) => {
    try {
      console.log('üè• Buscando dados da cl√≠nica pelo c√≥digo:', code);
      const { data: clinicData, error } = await supabase
        .from('clinic_settings')
        .select('id, name, clinic_code')
        .eq('clinic_code', code)
        .single();
      
      if (error || !clinicData) {
        console.error('‚ùå Erro ao buscar cl√≠nica pelo c√≥digo:', error);
        return null;
      }
      return clinicData;
    } catch (error) {
      console.error('‚ùå Erro inesperado ao buscar cl√≠nica:', error);
      return null;
    }
  }, []);

  // ‚úÖ SIGN IN
  const signIn = useCallback(async (email: string, password: string, clinicCode: string) => {
    console.log('üîê Iniciando login para:', email, 'com c√≥digo:', clinicCode);
    try {
      setLoading(true);

      // 1. Verificar se usu√°rio existe
      const { data: profileCheck, error: profileError } = await supabase
        .from('profiles')
        .select('id, role, clinic_code')
        .eq('email', email.trim())
        .single();

      if (profileError) {
        console.error('‚ùå Usu√°rio n√£o encontrado:', profileError);
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o encontrado. Verifique o email.' } };
      }

      // 2. Super admin com c√≥digo especial
      if (profileCheck.role === 'super' && clinicCode === '000000') {
        console.log('üëë Login de super admin detectado');
        
        if (profileCheck.clinic_code !== '000000') {
          setLoading(false);
          return { error: { message: 'Usu√°rio n√£o encontrado nesta cl√≠nica.' } };
        }

        const [name, domain] = email.trim().split('@');
        const syntheticEmail = `${name}+000000@${domain}`;

        const { data, error } = await supabase.auth.signInWithPassword({
          email: syntheticEmail,
          password,
        });

        if (error) {
          console.error('‚ùå Erro no login de super admin:', error);
          setLoading(false);
          return { error: { message: 'Email ou senha incorretos' } };
        }

        console.log('‚úÖ Login de super admin realizado');
        
        // ‚úÖ CORRE√á√ÉO: Aguardar atualiza√ß√£o do estado
        console.log('‚è≥ Aguardando atualiza√ß√£o do estado user (super admin)...');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // ‚úÖ CR√çTICO: Resetar loading ap√≥s sucesso
        setLoading(false);
        return { error: null, isSuperAdmin: true };
      }

      // 3. Usu√°rios normais - verificar cl√≠nica
      const clinicData = await fetchClinicDataByCode(clinicCode);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido' } };
      }

      // 4. Verificar acesso √† cl√≠nica
      if (profileCheck.clinic_code !== clinicCode) {
        console.error('‚ùå Usu√°rio n√£o tem acesso a esta cl√≠nica');
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o encontrado nesta cl√≠nica.' } };
      }

      // 5. Criar email sint√©tico e fazer login
      const [name, domain] = email.trim().split('@');
      const syntheticEmail = `${name}+${clinicCode}@${domain}`;

      const { data, error } = await supabase.auth.signInWithPassword({
        email: syntheticEmail,
        password,
      });

      if (error) {
        console.error('‚ùå Erro no login:', error);
        setLoading(false);
        
        if (error.message?.includes('Invalid login credentials')) {
          return { error: { message: 'Email ou senha incorretos' } };
        }
        
        return { error };
      }

      console.log('‚úÖ Login realizado com sucesso');
      
      // ‚úÖ CORRE√á√ÉO CR√çTICA: Aguardar o onAuthStateChange processar e atualizar o estado user
      // Isso garante que o useEffect no LoginPage detectar√° o usu√°rio logado
      console.log('‚è≥ Aguardando atualiza√ß√£o do estado user...');
      await new Promise(resolve => setTimeout(resolve, 100)); // Pequeno delay para garantir processamento
      
      // ‚úÖ CR√çTICO: Resetar loading ap√≥s sucesso
      setLoading(false);
      return { error: null, isSuperAdmin: false };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no login:', error);
      setLoading(false);
      return { error: { message: `Erro inesperado: ${error.message || 'Tente novamente'}` } };
    }
  }, [fetchClinicDataByCode]);

  // ‚úÖ REGISTER
  const register = useCallback(async (email: string, password: string, userData: any) => {
    console.log('üìù Iniciando cadastro para:', email);
    
    try {
      setLoading(true);
      
      const { clinic_code, full_name, phone, role } = userData;
      
      if (!clinic_code) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica √© obrigat√≥rio' } };
      }
      
      // 1. Verificar cl√≠nica
      const clinicData = await fetchClinicDataByCode(clinic_code);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido' } };
      }
      
      // 2. Verificar email dispon√≠vel
      const { data: existingUser } = await supabase
        .from('profiles')
        .select('id')
        .eq('email', email.trim())
        .eq('clinic_code', clinic_code)
        .single();
      
      if (existingUser) {
        setLoading(false);
        return { error: { message: 'Este email j√° est√° cadastrado nesta cl√≠nica.' } };
      }
      
      // 3. Criar usu√°rio
      const [name, domain] = email.trim().split('@');
      const syntheticEmail = `${name}+${clinic_code}@${domain}`;
      
      const { data, error } = await supabase.auth.signUp({
        email: syntheticEmail,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/`,
          data: {
            full_name: full_name.trim(),
            role: role || 'guardian',
            phone: phone?.trim() || '',
            clinic_code: clinic_code,
            is_active: true
          }
        }
      });
      
      if (error) {
        console.error('‚ùå Erro no register:', error);
        setLoading(false);
        return { error };
      }
      
      console.log('‚úÖ Usu√°rio criado. Verifique seu email.');
      setLoading(false);
      return { error: null };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no register:', error);
      setLoading(false);
      return { error: { message: `Erro: ${error.message}` } };
    }
  }, [fetchClinicDataByCode]);

  // ‚úÖ SIGN UP (criar cl√≠nica + admin)
  const signUp = useCallback(async (email: string, password: string, userData: any) => {
    console.log('üìù Iniciando signup completo para:', email);

    const { fullName, phone, role, clinicName, clinicAddress, clinicPhone } = userData;

    // Valida√ß√µes
    if (!clinicName?.trim()) {
      return { error: { message: 'Nome da cl√≠nica √© obrigat√≥rio' } };
    }
    if (!fullName?.trim()) {
      return { error: { message: 'Nome completo √© obrigat√≥rio' } };
    }
    if (role !== 'admin') {
      return { error: { message: 'Apenas admins podem criar cl√≠nicas' } };
    }

    try {
      setLoading(true);
      
      const { data, error } = await supabase.functions.invoke('complete-signup', {
        body: {
          email,
          password,
          fullName,
          phone,
          role,
          clinicName,
          clinicAddress,
          clinicPhone
        }
      });

      if (error) {
        console.error('‚ùå Erro na edge function:', error);
        setLoading(false);
        return { error: { message: `Erro no cadastro: ${error.message}` } };
      }

      if (!data.success) {
        setLoading(false);
        return { error: { message: data.error || 'Erro no cadastro' } };
      }

      console.log('‚úÖ Signup completo realizado!');
      setLoading(false);
      return { error: null, data };

    } catch (error: any) {
      console.error('‚ùå Erro inesperado no signUp:', error);
      setLoading(false);
      return { error: { message: `Erro: ${error.message}` } };
    }
  }, []);

  // ‚úÖ SIGN OUT
  const signOut = useCallback(async () => {
    // ‚úÖ PROTE√á√ÉO: Evitar m√∫ltiplas chamadas simult√¢neas
    if (isLoggingOut.current) {
      console.log('‚è≥ Logout j√° em andamento, ignorando chamada duplicada');
      return;
    }

    console.log('üö™ Iniciando logout...');
    isLoggingOut.current = true; // ‚úÖ Seta flag ANTES de qualquer opera√ß√£o
    
    try {
      // ‚úÖ N√ÉO setar loading aqui - deixar o onAuthStateChange lidar se necess√°rio
      // setLoading(true); 
      
      // ‚úÖ Limpar estados locais PRIMEIRO
      setUser(null);
      setSession(null);
      setProfile(null);
      lastProcessedSessionId.current = null; // ‚úÖ Resetar ref
      
      // Depois limpar cache
      cleanupAuthState();
      globalCache.clear();
      
      // Por √∫ltimo, fazer logout no Supabase (vai disparar onAuthStateChange)
      await supabase.auth.signOut({ scope: 'global' });
      
      console.log('‚úÖ Logout realizado');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
      // Garantir que estados s√£o limpos mesmo com erro
      setUser(null);
      setSession(null);
      setProfile(null);
    } finally {
      // ‚úÖ Garantir loading false e resetar flag imediatamente
      setLoading(false);
      isLoggingOut.current = false;
    }
  }, []);

  // ‚úÖ FORCE REAUTH
  const forceReauth = useCallback(() => {
    console.log('üîÑ For√ßando nova autentica√ß√£o...');
    cleanupAuthState();
    setUser(null);
    setSession(null);
    setProfile(null);
    lastProcessedSessionId.current = null; // ‚úÖ Resetar ref
    setLoading(false);
    toast.warning('Sess√£o expirada. Fa√ßa login novamente.');
  }, []);

  // ‚úÖ REFRESH AUTH
  const refreshAuth = useCallback(async () => {
    console.log('üîÑ Refresh auth - validando sess√£o...');
    try {
      setLoading(true);
      const { data: { session: currentSession } } = await supabase.auth.getSession();
      
      if (currentSession?.user) {
        console.log('‚úÖ Sess√£o v√°lida, mantendo usu√°rio logado');
        setLoading(false);
      } else {
        console.log('‚ùå Sess√£o inv√°lida, executando logout');
        forceReauth();
      }
    } catch (error) {
      console.error('‚ùå Erro ao validar sess√£o:', error);
      setLoading(false);
    }
  }, [forceReauth]);

  // ‚úÖ PROTE√á√ÉO: Garantir que loading = false quando user = null (ap√≥s inicializa√ß√£o)
  useEffect(() => {
    if (isInitialized.current && !user && loading) {
      console.log('‚ö†Ô∏è Detectado estado inconsistente: user=null mas loading=true. Corrigindo...');
      setLoading(false);
    }
  }, [user, loading]);

  // ‚úÖ PERSIST√äNCIA: Salvar dados cr√≠ticos sempre que user mudar
  useEffect(() => {
    if (user && user.profile) {
      persistUserData(user);
    }
  }, [user]);

  useEffect(() => {
    console.log('üöÄ AuthContext useEffect executando - Provider (re)montado');
    
    // Carregar redirectTo do localStorage
    const savedRedirectTo = localStorage.getItem('auth_redirect_to');
    if (savedRedirectTo) {
      setRedirectToState(savedRedirectTo);
    }

    let subscription: any = null;

    // Fun√ß√£o para buscar a sess√£o inicial e o perfil
    const fetchInitialSession = async () => {
      try {
        console.log('üîÑ AuthContext: Iniciando carregamento de sess√£o...');
        const { data: { session: initialSession }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("‚ùå Erro ao buscar sess√£o inicial:", error);
        }

        setSession(initialSession);
        
        let initialAppUser: AppUser | null = null;
        if (initialSession?.user) {
          console.log('üë§ Buscando perfil do usu√°rio:', initialSession.user.id);
          initialAppUser = await getProfileAndClinicId(initialSession.user);
          
          // ‚úÖ CR√çTICO: Atualizar ref para prevenir reprocessamento
          if (initialAppUser?.id) {
            lastProcessedSessionId.current = initialAppUser.id;
            console.log('üîí Sess√£o inicial marcada como processada:', initialAppUser.id);
          }
        }
        
        setUser(initialAppUser);
        setProfile(initialAppUser?.profile || null);
        isInitialized.current = true;
        setLoading(false);
        
        console.log('‚úÖ AuthContext: Sess√£o inicial carregada', { 
          hasUser: !!initialAppUser,
          email: initialAppUser?.email,
          clinicId: initialAppUser?.clinicId 
        });
      } catch (error) {
        console.error("‚ùå Erro ao inicializar auth:", error);
        isInitialized.current = true;
        setLoading(false);
      }
    };

    // 1Ô∏è‚É£ PRIMEIRO: Carregar sess√£o inicial
    fetchInitialSession().then(() => {
      // 2Ô∏è‚É£ DEPOIS: Registrar listener (s√≥ ap√≥s inicializa√ß√£o)
      const { data } = supabase.auth.onAuthStateChange(async (_event, newSession) => {
        console.log('üîÑ AuthContext: onAuthStateChange', _event, {
          isInitialized: isInitialized.current,
          hasSession: !!newSession,
          isLoggingOut: isLoggingOut.current,
          currentLoading: loading
        });
        
        // ‚úÖ PROTE√á√ÉO: Ignorar eventos durante logout
        if (isLoggingOut.current) {
          console.log('‚è≠Ô∏è Ignorando onAuthStateChange - logout em andamento');
          return;
        }
        
        // Se n√£o inicializou ainda, ignora (fetchInitialSession vai lidar)
        if (!isInitialized.current) {
          console.log('‚è≠Ô∏è Ignorando onAuthStateChange - ainda n√£o inicializado');
          return;
        }
        
        // ‚úÖ PROTE√á√ÉO CR√çTICA: Se j√° processamos este userId, n√£o processar novamente
        // Evita queries duplicadas e loading desnecess√°rio quando SIGNED_IN dispara ap√≥s INITIAL_SESSION
        const newUserId = newSession?.user?.id;
        if (newUserId && newUserId === lastProcessedSessionId.current) {
          // Mesma sess√£o j√° processada - n√£o precisa processar novamente
          if (_event !== 'SIGNED_OUT') {
            console.log(`‚è≠Ô∏è Ignorando ${_event} - sess√£o j√° processada (ID: ${newUserId})`);
            return;
          }
        }
        
        // ‚úÖ OTIMIZA√á√ÉO CR√çTICA: Apenas mostrar loading em eventos cr√≠ticos (login/logout)
        // TOKEN_REFRESHED, USER_UPDATED n√£o devem bloquear a UI
        const criticalEvents = ['SIGNED_IN', 'SIGNED_OUT'];
        const shouldShowLoading = criticalEvents.includes(_event);
        
        try {
          if (shouldShowLoading) {
            console.log('‚è≥ Evento cr√≠tico detectado, setando loading...');
            setLoading(true);
          } else {
            console.log('üîÑ Evento n√£o-cr√≠tico, processando silenciosamente...');
          }
          
          console.log('1Ô∏è‚É£ Atualizando session...');
          setSession(newSession);
          
          console.log('2Ô∏è‚É£ Buscando perfil do usu√°rio...');
          let appUser: AppUser | null = null;
          if (newSession?.user) {
            appUser = await getProfileAndClinicId(newSession.user);
            console.log('3Ô∏è‚É£ Perfil recuperado:', appUser ? 'SIM' : 'N√ÉO');
            
            // ‚úÖ CR√çTICO: Atualizar ref IMEDIATAMENTE ap√≥s processar
            // Isso previne eventos duplicados (como SIGNED_IN ap√≥s INITIAL_SESSION)
            if (appUser?.id) {
              lastProcessedSessionId.current = appUser.id;
              console.log('üîí Sess√£o marcada como processada:', appUser.id);
            }
          }
          
          console.log('4Ô∏è‚É£ Verificando prote√ß√£o TOKEN_REFRESHED...');
          // ‚úÖ PROTE√á√ÉO: Se j√° temos user E o novo appUser tem os mesmos dados,
          // n√£o sobrescrever para evitar perder estado em TOKEN_REFRESHED
          if (_event === 'TOKEN_REFRESHED' && user && appUser) {
            // Se √© o mesmo usu√°rio, manter dados existentes (mais completos)
            if (user.id === appUser.id) {
              console.log('üîÑ TOKEN_REFRESHED: Mantendo dados existentes do usu√°rio');
              // ‚úÖ IMPORTANTE: N√ÉO usar return aqui, pois pula o finally
              // Apenas n√£o sobrescrever user/profile
            } else {
              console.log('5Ô∏è‚É£ Atualizando user/profile (diferente)...');
              setUser(appUser);
              setProfile(appUser?.profile || null);
            }
          } else {
            // Para todos os outros eventos (SIGNED_IN, SIGNED_OUT, etc)
            console.log('5Ô∏è‚É£ Atualizando user/profile (evento ' + _event + ')...');
            setUser(appUser);
            setProfile(appUser?.profile || null);
          }
          
          console.log('6Ô∏è‚É£ Finalizando processamento...');
          console.log('‚úÖ AuthContext: Estado atualizado por onAuthStateChange', {
            hasUser: !!appUser,
            clinicId: appUser?.clinicId,
            event: _event
          });
          console.log('7Ô∏è‚É£ Try block completo, indo para finally...');
        } catch (error) {
          console.error('‚ùå Erro em onAuthStateChange:', error);
          // ‚úÖ PROTE√á√ÉO: Manter sess√£o/user atuais em caso de erro
          console.log('‚ö†Ô∏è Mantendo estado anterior devido a erro');
        } finally {
          // ‚úÖ CR√çTICO: Resetar loading apenas se foi setado
          if (shouldShowLoading) {
            console.log('‚úÖ Resetando loading para false');
            setLoading(false);
          }
        }
      });
      
      subscription = data.subscription;
    });

    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
    };
  }, [getProfileAndClinicId]);

  return (
    <AuthContext.Provider value={{
      session,
      user,
      loading,
      clinicId: profile?.clinic_id || user?.profile?.clinic_id || null,
      clinicCode: profile?.clinic_code || user?.profile?.clinic_code || null,
      redirectTo,
      setRedirectTo,
      clearRedirectTo,
      signIn,
      register,
      signUp,
      signOut,
      forceReauth,
      refreshAuth,
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}