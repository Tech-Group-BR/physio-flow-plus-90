import { useState, useEffect, createContext, useContext } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  clinicId: string | null;
  clinicCode: string | null;
  signIn: (email: string, password: string, clinicCode: string) => Promise<{ error: any }>;
  signUp: (email: string, password: string, userData: any) => Promise<{ error: any }>;
  signOut: () => Promise<void>;
  forceReauth: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Fun√ß√µes utilit√°rias
const cleanupAuthState = () => {
  console.log('üßπ Limpando estado de autentica√ß√£o...');
  localStorage.removeItem('supabase.auth.token');
  sessionStorage.clear();
};

const forceSignOutSupabase = async () => {
  try {
    await supabase.auth.signOut({ scope: 'global' });
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro no signOut for√ßado:', error);
  }
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [clinicId, setClinicId] = useState<string | null>(null);
  const [clinicCode, setClinicCode] = useState<string | null>(null);

  // Fun√ß√£o para buscar dados da cl√≠nica pelo c√≥digo
  const fetchClinicDataByCode = async (code: string) => {
    try {
      console.log('üè• Buscando dados da cl√≠nica pelo c√≥digo:', code);
      
      // CORRIGIDO: usar 'name' em vez de 'clinic_name'
      const { data: clinicData, error } = await supabase
        .from('clinic_settings')
        .select('id, name, clinic_code')
        .eq('clinic_code', code)
        .single();
      
      if (error || !clinicData) {
        console.error('‚ùå Erro ao buscar cl√≠nica pelo c√≥digo:', error);
        return null;
      }
      
      console.log('‚úÖ Cl√≠nica encontrada:', clinicData);
      return clinicData;
    } catch (error) {
      console.error('‚ùå Erro inesperado ao buscar cl√≠nica:', error);
      return null;
    }
  };

  // Fun√ß√£o para carregar dados da cl√≠nica do usu√°rio
  const loadUserClinicData = async (userId: string) => {
    try {
      console.log('üë§ Carregando dados da cl√≠nica para usu√°rio:', userId);
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('clinic_id, clinic_code')
        .eq('id', userId)
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao buscar perfil:', error);
        // N√ÉO for√ßar reauth aqui - pode ser usu√°rio novo
        setClinicCode(null);
        setClinicId(null);
        return;
      }
      
      if (!profile?.clinic_code) {
        console.warn('‚ö†Ô∏è Usu√°rio sem clinic_code definido');
        setClinicCode(null);
        setClinicId(null);
        return;
      }
      
      console.log('üìã Dados do perfil:', profile);
      setClinicCode(profile.clinic_code);
      
      // Se j√° tem clinic_id salvo, usar
      if (profile.clinic_id) {
        console.log('‚úÖ Usando clinic_id do perfil:', profile.clinic_id);
        setClinicId(profile.clinic_id);
      } else {
        // Sen√£o, buscar pelo c√≥digo e atualizar o perfil
        console.log('üîç Buscando clinic_id pelo c√≥digo...');
        const clinicData = await fetchClinicDataByCode(profile.clinic_code);
        
        if (clinicData) {
          setClinicId(clinicData.id);
          
          // Atualizar o perfil com o clinic_id encontrado
          const { error: updateError } = await supabase
            .from('profiles')
            .update({ 
              clinic_id: clinicData.id,
              updated_at: new Date().toISOString()
            })
            .eq('id', userId);
          
          if (updateError) {
            console.warn('‚ö†Ô∏è Erro ao atualizar clinic_id no perfil:', updateError);
          } else {
            console.log('‚úÖ Clinic_id atualizado no perfil');
          }
        } else {
          console.warn('‚ö†Ô∏è Cl√≠nica n√£o encontrada pelo c√≥digo');
          setClinicId(null);
        }
      }
    } catch (error) {
      console.error('‚ùå Erro inesperado ao carregar dados da cl√≠nica:', error);
      setClinicCode(null);
      setClinicId(null);
    }
  };

  // Fun√ß√£o para for√ßar nova autentica√ß√£o
  const forceReauth = () => {
    console.log('üîÑ For√ßando nova autentica√ß√£o...');
    cleanupAuthState();
    setUser(null);
    setSession(null);
    setClinicId(null);
    setClinicCode(null);
    setLoading(false); // IMPORTANTE: parar o loading
    toast.warning('Sess√£o expirada. Fa√ßa login novamente.');
  };

  // Monitorar mudan√ßas de autentica√ß√£o
  useEffect(() => {
    console.log('üîÑ Inicializando monitoramento de autentica√ß√£o...');
    
    let mounted = true;

    // Verificar sess√£o inicial
    const checkInitialSession = async () => {
      try {
        console.log('üîç Verificando sess√£o inicial...');
        
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('‚ùå Erro ao verificar sess√£o inicial:', error);
          if (mounted) {
            setUser(null);
            setSession(null);
            setClinicId(null);
            setClinicCode(null);
            setLoading(false);
          }
          return;
        }
        
        if (session?.user && mounted) {
          console.log('üì± Sess√£o inicial encontrada:', session.user.email);
          setSession(session);
          setUser(session.user);
          
          // Carregar dados da cl√≠nica em background
          loadUserClinicData(session.user.id).catch(err => {
            console.warn('‚ö†Ô∏è Erro ao carregar dados da cl√≠nica:', err);
          });
        } else {
          console.log('üì± Nenhuma sess√£o inicial');
          if (mounted) {
            setUser(null);
            setSession(null);
            setClinicId(null);
            setClinicCode(null);
          }
        }
      } catch (error) {
        console.error('‚ùå Erro inesperado na verifica√ß√£o inicial:', error);
        if (mounted) {
          setUser(null);
          setSession(null);
          setClinicId(null);
          setClinicCode(null);
        }
      } finally {
        // SEMPRE finalizar loading
        if (mounted) {
          console.log('‚úÖ Loading inicial finalizado');
          setLoading(false);
        }
      }
    };

    checkInitialSession();

    // Listener de mudan√ßas de estado
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!mounted) return;
        
        console.log('üîÑ Auth state change:', event, session?.user?.email || 'no user');
        
        if (event === 'SIGNED_IN' && session?.user) {
          console.log('‚úÖ Usu√°rio logado');
          setSession(session);
          setUser(session.user);
          
          // Carregar dados da cl√≠nica em background
          loadUserClinicData(session.user.id).catch(err => {
            console.warn('‚ö†Ô∏è Erro ao carregar dados da cl√≠nica:', err);
          });
          
        } else if (event === 'SIGNED_OUT') {
          console.log('üëã Usu√°rio deslogado');
          setUser(null);
          setSession(null);
          setClinicId(null);
          setClinicCode(null);
          
        } else if (event === 'TOKEN_REFRESHED' && session?.user) {
          console.log('üîÑ Token renovado');
          setSession(session);
          setUser(session.user);
          
        } else if (event === 'USER_UPDATED' && session?.user) {
          console.log('üë§ Usu√°rio atualizado');
          setSession(session);
          setUser(session.user);
        } else {
          // Outros eventos
          setUser(session?.user || null);
          setSession(session || null);
          if (!session) {
            setClinicId(null);
            setClinicCode(null);
          }
        }
        
        // SEMPRE finalizar loading nos eventos de auth
        setLoading(false);
      }
    );

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []); // Array vazio para executar apenas uma vez

  const signIn = async (email: string, password: string, clinicCode: string) => {
    console.log('üîê Iniciando login para:', email, 'com c√≥digo:', clinicCode);
    
    try {
      setLoading(true);
      
      // 1. Verificar se o c√≥digo da cl√≠nica √© v√°lido ANTES do login
      const clinicData = await fetchClinicDataByCode(clinicCode);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido ou cl√≠nica n√£o encontrada' } };
      }
      
      // 2. Fazer login
      const { data, error } = await supabase.auth.signInWithPassword({
        email: email.trim(),
        password,
      });
      
      if (error) {
        console.error('‚ùå Erro no login:', error);
        setLoading(false);
        return { error };
      }
      
      if (!data.user) {
        setLoading(false);
        return { error: { message: 'Falha na autentica√ß√£o' } };
      }
      
      // 3. Verificar se o usu√°rio pertence √† cl√≠nica informada
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('clinic_code')
        .eq('id', data.user.id)
        .single();
      
      if (profileError) {
        console.error('‚ùå Erro ao verificar perfil do usu√°rio:', profileError);
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o encontrado no sistema' } };
      }
      
      if (profile.clinic_code !== clinicCode) {
        console.error('‚ùå Usu√°rio n√£o pertence √† cl√≠nica informada');
        // Fazer logout para limpar a sess√£o
        await supabase.auth.signOut();
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o autorizado para esta cl√≠nica' } };
      }
      
      console.log('‚úÖ Login realizado com sucesso - usu√°rio autorizado para a cl√≠nica');
      
      // Os estados ser√£o atualizados pelo listener onAuthStateChange
      // setLoading(false) ser√° chamado l√°
      return { error: null };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no login:', error);
      setLoading(false);
      return { error };
    }
  };

  const signUp = async (email: string, password: string, userData: any) => {
    console.log('üìù Iniciando cadastro para:', email);
    console.log('üìã Dados recebidos:', userData);
    
    try {
      setLoading(true);
      
      const { clinic_code } = userData;
      
      if (!clinic_code) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica √© obrigat√≥rio' } };
      }
      
      if (!userData.full_name?.trim()) {
        setLoading(false);
        return { error: { message: 'Nome completo √© obrigat√≥rio' } };
      }
      
      // 1. Verificar se o c√≥digo da cl√≠nica √© v√°lido
      console.log('üîç Verificando c√≥digo da cl√≠nica:', clinic_code);
      const clinicData = await fetchClinicDataByCode(clinic_code);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido' } };
      }
      
      console.log('‚úÖ Cl√≠nica validada:', clinicData);
      
      // 2. Criar usu√°rio no Auth COM metadados para o trigger funcionar
      console.log('üîê Criando usu√°rio no auth com metadados para trigger...');
      const { data, error } = await supabase.auth.signUp({
        email: email.trim(),
        password,
        options: {
          data: {
            full_name: userData.full_name?.trim() || '',
            role: userData.role || 'guardian',
            phone: userData.phone?.trim() || '',
            clinic_code: clinic_code,
            clinic_id: clinicData.id,
            is_active: true
          }
        }
      });
      
      if (error) {
        console.error('‚ùå Erro no signup:', error);
        setLoading(false);
        return { error };
      }
      
      const userId = data.user?.id;
      if (!userId) {
        console.warn('‚ö†Ô∏è Usu√°rio n√£o foi criado no auth');
        setLoading(false);
        return { error: { message: 'Falha ao criar usu√°rio' } };
      }
      
      console.log('‚úÖ Usu√°rio criado no auth:', userId);
      console.log('üìß Email do usu√°rio:', data.user?.email);
      
      // 3. Aguardar um pouco para o trigger processar
      console.log('‚è≥ Aguardando trigger processar cria√ß√£o do perfil...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // 4. Verificar se o perfil foi criado pelo trigger
      console.log('üîç Verificando se perfil foi criado pelo trigger...');
      const { data: profile, error: checkError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (checkError) {
        console.error('‚ùå Perfil n√£o foi criado pelo trigger:', checkError);
        
        // Criar perfil manualmente se o trigger falhou
        console.log('üìù Trigger falhou, criando perfil manualmente...');
        
        const profileData = {
          id: userId,
          full_name: userData.full_name?.trim() || '',
          email: email.trim(),
          phone: userData.phone?.trim() || '',
          role: userData.role || 'guardian',
          is_active: true,
          clinic_code: clinic_code,
          clinic_id: clinicData.id,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        console.log('üìã Dados do perfil manual:', profileData);
        
        const { data: insertedProfile, error: profileError } = await supabase
          .from('profiles')
          .insert(profileData)
          .select()
          .single();
        
        if (profileError) {
          console.error('‚ùå Erro ao criar perfil manualmente:', profileError);
          
          // Limpar usu√°rio criado
          try {
            console.log('üßπ Limpando usu√°rio devido a erro no perfil...');
            await supabase.auth.signOut();
          } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Erro na limpeza:', cleanupError);
          }
          
          setLoading(false);
          
          // Mensagens de erro espec√≠ficas
          if (profileError.code === '23502') {
            const column = profileError.message?.match(/column "([^"]+)"/)?.[1] || 'desconhecida';
            return { 
              error: { 
                message: `Campo obrigat√≥rio "${column}" n√£o foi preenchido.`
              } 
            };
          }
          
          if (profileError.code === '23505') {
            return { 
              error: { 
                message: 'Este usu√°rio j√° existe. Tente fazer login.'
              } 
            };
          }
          
          return { 
            error: { 
              message: `Erro ao criar perfil: ${profileError.message || 'Erro desconhecido'}`
            } 
          };
        }
        
        console.log('‚úÖ Perfil criado manualmente:', insertedProfile);
        
      } else {
        console.log('‚úÖ Perfil criado pelo trigger com sucesso:', profile);
        
        // Verificar se o trigger preencheu todos os campos necess√°rios
        if (!profile.clinic_code || !profile.clinic_id) {
          console.log('üîß Completando dados do perfil criado pelo trigger...');
          
          const { error: updateError } = await supabase
            .from('profiles')
            .update({
              clinic_code: clinic_code,
              clinic_id: clinicData.id,
              phone: userData.phone?.trim() || profile.phone || '',
              updated_at: new Date().toISOString()
            })
            .eq('id', userId);
          
          if (updateError) {
            console.warn('‚ö†Ô∏è Erro ao completar perfil:', updateError);
          } else {
            console.log('‚úÖ Perfil completado com dados da cl√≠nica');
          }
        } else {
          console.log('‚úÖ Perfil do trigger est√° completo');
        }
      }
      
      console.log('‚úÖ Cadastro realizado com sucesso');
      setLoading(false);
      return { error: null };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no signup:', error);
      setLoading(false);
      return { 
        error: { 
          message: `Erro inesperado: ${error.message || 'Tente novamente'}`
        }
      };
    }
  };

  const signOut = async () => {
    console.log('üö™ Iniciando logout...');
    try {
      setLoading(true);
      cleanupAuthState();
      await forceSignOutSupabase();
      
      // Estados ser√£o limpos pelo listener
      console.log('‚úÖ Logout realizado');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
      // For√ßar limpeza mesmo com erro
      setUser(null);
      setSession(null);
      setClinicId(null);
      setClinicCode(null);
    } finally {
      setLoading(false);
    }
  };

  // Debug em desenvolvimento
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üêõ Auth Debug:', {
        user: user?.email || null,
        clinicCode,
        clinicId,
        loading
      });
    }
  }, [user, clinicCode, clinicId, loading]);

  const value = {
    user,
    session,
    loading,
    clinicId,
    clinicCode,
    signIn,
    signUp,
    signOut,
    forceReauth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}