import { useState, useEffect, createContext, useContext } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import PersistentCache from '../lib/persistentCache';
import type { CachedUserData } from '../lib/persistentCache';

// Importa os tipos da sua database para o 'Profile'
import { Database } from '@/integrations/supabase/types';
import { Route } from 'lucide-react';

// --- TIPAGEM ATUALIZADA ---
// Tipo para o perfil (como ele √© salvo na sua tabela 'profiles')
type Profile = Database['public']['Tables']['profiles']['Row'];

// Nosso tipo de usu√°rio "enriquecido" para o frontend
// O 'user' do Supabase Auth tem o email sint√©tico. O 'profile' tem o email REAL.
export type AppUser = User & {
  profile: Profile | null;
};

interface AuthContextType {
  user: AppUser | null;
  session: Session | null;
  loading: boolean;
  clinicId: string | null;
  clinicCode: string | null;
  signIn: (email: string, password: string, clinicCode: string) => Promise<{ error: any; isSuperAdmin?: boolean }>;
  signUp: (email: string, password: string, userData: any) => Promise<{ error: any }>;
  signOut: () => Promise<void>;
  forceReauth: () => void;
  refreshAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Fun√ß√µes utilit√°rias
const cleanupAuthState = () => {
  console.log('üßπ Limpando estado de autentica√ß√£o...');
  localStorage.removeItem('supabase.auth.token');
  sessionStorage.clear();
};

const forceSignOutSupabase = async () => {
  try {
    await supabase.auth.signOut({ scope: 'global' });
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro no signOut for√ßado:', error);
  }
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<AppUser | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState<Profile | null>(null);

  // Fun√ß√£o para buscar dados da cl√≠nica pelo c√≥digo
  const fetchClinicDataByCode = async (code: string) => {
    try {
      console.log('üè• Buscando dados da cl√≠nica pelo c√≥digo:', code);
      const { data: clinicData, error } = await supabase
        .from('clinic_settings')
        .select('id, name, clinic_code')
        .eq('clinic_code', code)
        .single();
      
      if (error || !clinicData) {
        console.error('‚ùå Erro ao buscar cl√≠nica pelo c√≥digo:', error);
        return null;
      }
      return clinicData;
    } catch (error) {
      console.error('‚ùå Erro inesperado ao buscar cl√≠nica:', error);
      return null;
    }
  };

  // Fun√ß√£o para carregar dados do PERFIL do usu√°rio
  const loadUserProfile = async (userId: string): Promise<Profile | null> => {
    try {
      console.log('üë§ Carregando perfil do usu√°rio:', userId);
      
      // ‚úÖ TIMEOUT: Adicionar timeout de 10 segundos na query
      const profilePromise = supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();
        
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout ao carregar perfil')), 10000);
      });
      
      const result = await Promise.race([profilePromise, timeoutPromise]) as any;
      
      const { data: profileData, error } = result;
      
      if (error) {
        console.error('‚ùå Erro ao buscar perfil:', error);
        console.error('‚ùå Detalhes do erro:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        return null;
      }

      console.log('‚úÖ Perfil encontrado:', {
        id: profileData.id,
        email: profileData.email,
        clinic_id: profileData.clinic_id,
        clinic_code: profileData.clinic_code,
        role: profileData.role
      });

      // ‚úÖ VALIDA√á√ÉO SUAVIZADA: Apenas alertar sobre dados faltantes, mas n√£o bloquear
      if (!profileData.clinic_id || !profileData.clinic_code) {
        console.warn('‚ö†Ô∏è Perfil com dados incompletos:', {
          clinic_id: profileData.clinic_id,
          clinic_code: profileData.clinic_code
        });
        // N√£o bloquear o login, apenas alertar
        toast.warning('Perfil com dados incompletos. Alguns recursos podem n√£o funcionar.');
      }
      
      // ‚úÖ CACHE: Salvar dados cr√≠ticos no cache local
      if (profileData.clinic_id && profileData.clinic_code) {
        const cacheData: CachedUserData = {
          userId: profileData.id,
          email: profileData.email,
          clinic_id: profileData.clinic_id,
          clinic_code: profileData.clinic_code,
          role: profileData.role,
          name: profileData.full_name,
          cachedAt: Date.now()
        };
        PersistentCache.cacheUserData(cacheData);
      }
      
      return profileData;
    } catch (error) {
      console.error('‚ùå Erro inesperado ao carregar perfil:', error);
      if (error instanceof Error && error.message.includes('Timeout')) {
        console.error('‚ùå TIMEOUT na consulta do perfil - pode ser problema de conex√£o');
        toast.error('Timeout ao carregar dados do usu√°rio. Tente novamente.');
      }
      return null;
    }
  };

  // Fun√ß√£o para for√ßar nova autentica√ß√£o
  const forceReauth = () => {
    console.log('üîÑ For√ßando nova autentica√ß√£o...');
    cleanupAuthState();
    setUser(null);
    setSession(null);
    setProfile(null);
    setLoading(false);
    toast.warning('Sess√£o expirada. Fa√ßa login novamente.');
  };

  // Fun√ß√£o para refresh sem limpar o estado (para mudan√ßa de aba)
  const refreshAuth = async () => {
    console.log('üîÑ Refresh auth - validando sess√£o atual...');
    try {
      setLoading(true);
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session?.user) {
        console.log('‚úÖ Sess√£o v√°lida encontrada, mantendo usu√°rio logado');
        // N√£o limpa o estado, apenas revalida
        setLoading(false);
      } else {
        console.log('‚ùå Nenhuma sess√£o v√°lida, executando logout');
        forceReauth();
      }
    } catch (error) {
      console.error('‚ùå Erro ao validar sess√£o:', error);
      setLoading(false);
    }
  };

  // Monitorar mudan√ßas de autentica√ß√£o
  useEffect(() => {
    console.log('üîÑ Inicializando monitoramento de autentica√ß√£o...');
    let mounted = true;
    let initialSessionProcessed = false; // ‚úÖ Flag para evitar reprocessamento

    // ‚úÖ PROTE√á√ÉO DE EMERG√äNCIA: Timeout absoluto para evitar loading infinito
    const emergencyTimeout = setTimeout(() => {
      if (mounted && loading) {
        console.error('üö® TIMEOUT DE EMERG√äNCIA - For√ßando parada do loading ap√≥s 15 segundos');
        setLoading(false);
      }
    }, 15000); // 15 segundos timeout absoluto

    // Verificar sess√£o inicial
    const checkInitialSession = async () => {
      try {
        console.log('üîç Verificando sess√£o inicial...');
        
        // ‚úÖ PRIMEIRO: Tentar carregar do cache
        const cachedUserData = PersistentCache.getCachedUserData();
        if (cachedUserData && PersistentCache.hasValidUserCache()) {
          console.log('‚ö° Carregando dados do usu√°rio do cache...');
          
          // Validar se a sess√£o ainda √© v√°lida no Supabase
          const { data: { session }, error: sessionError } = await supabase.auth.getSession();
          
          if (session?.user && session.user.id === cachedUserData.userId) {
            console.log('‚úÖ Sess√£o v√°lida - usando dados do cache');
            
            setUser({
              ...session.user,
              profile: {
                id: cachedUserData.userId,
                email: cachedUserData.email,
                clinic_id: cachedUserData.clinic_id,
                clinic_code: cachedUserData.clinic_code,
                role: cachedUserData.role as 'admin' | 'professional' | 'receptionist' | 'guardian',
                full_name: cachedUserData.name || '',
                phone: '',
                is_active: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }
            });
            setSession(session);
            setProfile({
              id: cachedUserData.userId,
              email: cachedUserData.email,
              clinic_id: cachedUserData.clinic_id,
              clinic_code: cachedUserData.clinic_code,
              role: cachedUserData.role as 'admin' | 'professional' | 'receptionist' | 'guardian',
              full_name: cachedUserData.name || '',
              phone: '',
              is_active: true,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
            
            if (mounted) {
              setLoading(false);
              initialSessionProcessed = true;
            }
            return; // Retorna cedo - dados do cache s√£o v√°lidos
          } else {
            console.log('‚ö†Ô∏è Sess√£o no cache inv√°lida, limpando cache...');
            PersistentCache.clearUserCache();
          }
        }
        
        // ‚úÖ SEGUNDO: Buscar do servidor
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('‚ùå Erro ao verificar sess√£o inicial:', error);
          if (mounted) {
            setUser(null);
            setSession(null);
            setProfile(null);
            setLoading(false);
            initialSessionProcessed = true; // ‚úÖ Marcar como processado
          }
          return;
        }
        
        if (session?.user && mounted) {
          console.log('üì± Sess√£o inicial encontrada:', {
            userId: session.user.id,
            email: session.user.email,
            metadata: session.user.user_metadata
          });
          
          // ‚úÖ CORRIGIDO: Carregar perfil e aguardar
          const userProfile = await loadUserProfile(session.user.id);
          console.log('üë§ Perfil carregado:', userProfile);
          
          if (userProfile && mounted) {
            console.log('‚úÖ Definindo usu√°rio autenticado com perfil v√°lido');
            setSession(session);
            setProfile(userProfile);
            setUser({ ...session.user, profile: userProfile });
          } else if (mounted) {
            console.warn('‚ö†Ô∏è Perfil n√£o encontrado ou inv√°lido, mas mantendo sess√£o');
            // MUDAN√áA: N√£o limpar a sess√£o automaticamente, apenas alertar
            setSession(session);
            setProfile(null);
            setUser({ ...session.user, profile: null });
          }
        } else {
          console.log('üì± Nenhuma sess√£o inicial');
          if (mounted) {
            setUser(null);
            setSession(null);
            setProfile(null);
          }
        }
        
        if (mounted) {
          initialSessionProcessed = true; // ‚úÖ Marcar como processado
        }
      } catch (error) {
        console.error('‚ùå Erro inesperado na verifica√ß√£o inicial:', error);
        if (mounted) {
          setUser(null);
          setSession(null);
          setProfile(null);
          initialSessionProcessed = true; // ‚úÖ Marcar como processado mesmo com erro
        }
      } finally {
        if (mounted) {
          console.log('‚úÖ Loading inicial finalizado');
          setLoading(false);
        }
      }
    };

    checkInitialSession();

    // Listener de mudan√ßas de estado - SIMPLIFICADO COM PROTE√á√ÉO
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, currentSession) => {
        if (!mounted) return;
        
        console.log('üîÑ Auth state change:', event, {
          hasSession: !!currentSession,
          userEmail: currentSession?.user?.email || 'no user',
          userId: currentSession?.user?.id || 'no id',
          initialSessionProcessed
        });
        
        // ‚úÖ PROTE√á√ÉO: Ignorar eventos at√© que a sess√£o inicial seja processada
        if (!initialSessionProcessed) {
          console.log('‚è≠Ô∏è Ignorando evento, sess√£o inicial ainda processando');
          return;
        }

        // ‚úÖ PROTE√á√ÉO: N√£o processar INITIAL_SESSION pois j√° foi processado acima
        if (event === 'INITIAL_SESSION') {
          console.log('‚è≠Ô∏è Ignorando INITIAL_SESSION, j√° processado');
          return;
        }

        // ‚úÖ PROTE√á√ÉO: S√≥ processar eventos importantes
        const importantEvents = ['SIGNED_IN', 'SIGNED_OUT', 'TOKEN_REFRESHED'];
        if (!importantEvents.includes(event)) {
          console.log('‚è≠Ô∏è Ignorando evento n√£o cr√≠tico:', event);
          return;
        }

        setLoading(true);

        let currentUser: AppUser | null = null;
        let currentProfile: Profile | null = null;

        if (currentSession?.user) {
          console.log('üë§ Carregando perfil para usu√°rio no event:', event);
          currentProfile = await loadUserProfile(currentSession.user.id);
          
          if (currentProfile) {
            currentUser = { ...currentSession.user, profile: currentProfile };
          } else {
            console.warn('‚ö†Ô∏è Perfil n√£o encontrado para o usu√°rio:', currentSession.user.id);
            currentUser = { ...currentSession.user, profile: null };
          }
        }

        // ‚úÖ CORRIGIDO: Aguardar todas as opera√ß√µes antes de finalizar loading
        if (mounted) {
          setSession(currentSession);
          setUser(currentUser);
          setProfile(currentProfile);
          setLoading(false);
        }
        
        console.log('‚úÖ Auth state change processado:', {
          event,
          hasUser: !!currentUser,
          hasProfile: !!currentProfile,
          clinicId: currentProfile?.clinic_id || null,
          clinicCode: currentProfile?.clinic_code || null
        });
      }
    );

    return () => {
      mounted = false;
      clearTimeout(emergencyTimeout); // ‚úÖ Limpar timeout de emerg√™ncia
      subscription.unsubscribe();
    };
  }, []);

  const signIn = async (email: string, password: string, clinicCode: string) => {
    console.log('üîê Iniciando login para:', email, 'com c√≥digo:', clinicCode);
    try {
      setLoading(true);

      // 1. Primeiro fazer autentica√ß√£o para verificar se usu√°rio existe
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id, role, clinic_code')
        .eq('email', email.trim())
        .single();

      if (profileError) {
        console.error('‚ùå Usu√°rio n√£o encontrado:', profileError);
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o encontrado. Verifique o email.' } };
      }

      // 2. Verificar se √© super admin com c√≥digo especial
      if (profile.role === 'super' && clinicCode === '000000') {
        console.log('üëë Login de super admin detectado - tratando como cl√≠nica 000000');
        
        // Verificar se usu√°rio tem acesso a "cl√≠nica" 000000
        if (profile.clinic_code !== '000000') {
          console.error('‚ùå Super admin n√£o tem acesso ao c√≥digo 000000');
          setLoading(false);
          return { error: { message: 'Usu√°rio n√£o encontrado nesta cl√≠nica. Verifique o email e c√≥digo da cl√≠nica.' } };
        }

        // Para super admin, tamb√©m usar email sint√©tico como cl√≠nica normal
        const [name, domain] = email.trim().split('@');
        const syntheticEmail = `${name}+000000@${domain}`;
        console.log('üìß Email sint√©tico para super admin:', syntheticEmail);

        const { data, error } = await supabase.auth.signInWithPassword({
          email: syntheticEmail,
          password,
        });

        if (error) {
          console.error('‚ùå Erro no login de super admin:', error);
          setLoading(false);
          return { error: { message: 'Email ou senha incorretos' } };
        }

        if (!data.user) {
          setLoading(false);
          return { error: { message: 'Falha na autentica√ß√£o' } };
        }

        console.log('‚úÖ Login de super admin realizado com sucesso - retornando isSuperAdmin: true');
        return { error: null, isSuperAdmin: true };
      }

      // 3. Para usu√°rios normais, verificar se a cl√≠nica √© v√°lida
      const clinicData = await fetchClinicDataByCode(clinicCode);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido ou cl√≠nica n√£o encontrada' } };
      }

      // 4. Verificar se usu√°rio tem acesso a esta cl√≠nica espec√≠fica
      if (profile.clinic_code !== clinicCode) {
        console.error('‚ùå Usu√°rio n√£o tem acesso a esta cl√≠nica');
        setLoading(false);
        return { error: { message: 'Usu√°rio n√£o encontrado nesta cl√≠nica. Verifique o email e c√≥digo da cl√≠nica.' } };
      }

      // 5. Criar email sint√©tico para login
      const [name, domain] = email.trim().split('@');
      const syntheticEmail = `${name}+${clinicCode}@${domain}`;
      console.log('üìß Email sint√©tico para login:', syntheticEmail);

      // 6. Fazer login com email sint√©tico
      const { data, error } = await supabase.auth.signInWithPassword({
        email: syntheticEmail,
        password,
      });

      if (error) {
        console.error('‚ùå Erro no login:', error);
        setLoading(false);
        
        // Mensagens espec√≠ficas
        if (error.message?.includes('Invalid login credentials')) {
          return { error: { message: 'Email ou senha incorretos' } };
        }
        
        if (error.message?.includes('Email not confirmed')) {
          return { error: { message: 'Email n√£o confirmado. Verifique sua caixa de entrada.' } };
        }
        
        return { error };
      }

      if (!data.user) {
        setLoading(false);
        return { error: { message: 'Falha na autentica√ß√£o' } };
      }

      console.log('‚úÖ Login realizado com sucesso');
      // O listener onAuthStateChange vai processar o resto
      return { error: null, isSuperAdmin: false };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no login:', error);
      setLoading(false);
      return { error: { message: `Erro inesperado: ${error.message || 'Tente novamente'}` } };
    }
  };

  const signUp = async (email: string, password: string, userData: any) => {
    console.log('üìù Iniciando cadastro para:', email);
    console.log('üìã Dados recebidos:', userData);
    
    try {
      setLoading(true);
      
      const { clinic_code, full_name, phone, role } = userData;
      
      if (!clinic_code) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica √© obrigat√≥rio' } };
      }
      
      if (!full_name?.trim()) {
        setLoading(false);
        return { error: { message: 'Nome completo √© obrigat√≥rio' } };
      }
      
      // 1. Verificar se o c√≥digo da cl√≠nica √© v√°lido
      console.log('üîç Verificando c√≥digo da cl√≠nica:', clinic_code);
      const clinicData = await fetchClinicDataByCode(clinic_code);
      if (!clinicData) {
        setLoading(false);
        return { error: { message: 'C√≥digo da cl√≠nica inv√°lido ou n√£o encontrada' } };
      }
      console.log('‚úÖ Cl√≠nica validada:', clinicData);
      
      // 2. Verificar se email j√° existe nesta cl√≠nica
      console.log('üîç Verificando se email j√° existe nesta cl√≠nica...');
      const { data: existingUser, error: checkError } = await supabase
        .from('profiles')
        .select('id, email, clinic_code')
        .eq('email', email.trim())
        .eq('clinic_code', clinic_code)
        .single();
      
      if (existingUser && !checkError) {
        console.log('‚ùå Email j√° existe nesta cl√≠nica');
        setLoading(false);
        return { 
          error: { 
            message: 'Este email j√° est√° cadastrado nesta cl√≠nica. Tente fazer login.' 
          } 
        };
      }
      
      if (checkError && checkError.code !== 'PGRST116') {
        console.error('‚ùå Erro ao verificar email:', checkError);
        setLoading(false);
        return { 
          error: { 
            message: 'Erro ao verificar dados. Tente novamente.' 
          } 
        };
      }
      
      console.log('‚úÖ Email dispon√≠vel nesta cl√≠nica');
      
      // 3. Criar email sint√©tico para o Auth
      const [name, domain] = email.trim().split('@');
      const syntheticEmail = `${name}+${clinic_code}@${domain}`;
      console.log('üìß Email sint√©tico para auth:', syntheticEmail);
      
      // 4. Criar usu√°rio no Auth com email sint√©tico
      console.log('üîê Criando usu√°rio no auth...');
      const { data, error } = await supabase.auth.signUp({
        email: syntheticEmail, // Email sint√©tico para o auth
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/`,
          data: {
            // O trigger vai extrair o email real e buscar clinic_id automaticamente
            full_name: full_name.trim(),
            role: role || 'guardian',
            phone: phone?.trim() || '',
            clinic_code: clinic_code,
            is_active: true
          }
        }
      });
      
      if (error) {
        console.error('‚ùå Erro no signup:', error);
        setLoading(false);
        
        if (error.message?.includes('User already registered')) {
          return { 
            error: { 
              message: 'Este email j√° est√° cadastrado nesta cl√≠nica. Tente fazer login.' 
            } 
          };
        }
        
        return { error };
      }
      
      if (!data.user) {
        console.warn('‚ö†Ô∏è Usu√°rio n√£o foi criado no auth');
        setLoading(false);
        return { error: { message: 'Falha ao criar usu√°rio' } };
      }
      
      console.log('‚úÖ Usu√°rio criado no auth. Verifique seu email para confirmar a conta.');
      // O trigger deve ter criado o perfil automaticamente
      setLoading(false);
      return { error: null };
      
    } catch (error: any) {
      console.error('‚ùå Erro inesperado no signup:', error);
      setLoading(false);
      return { 
        error: { 
          message: `Erro inesperado: ${error.message || 'Tente novamente'}`
        }
      };
    }
  };

  const signOut = async () => {
    console.log('üö™ Iniciando logout...');
    try {
      setLoading(true);
      cleanupAuthState();
      
      // ‚úÖ CACHE: Limpar todos os caches
      PersistentCache.clearAllCache();
      
      await forceSignOutSupabase();
      
      console.log('‚úÖ Logout realizado');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
      setUser(null);
      setSession(null);
      setProfile(null);
    } finally {
      setLoading(false);
    }
  };

  // Debug em desenvolvimento
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üêõ Auth Debug Detalhado:', {
        loading,
        hasSession: !!session,
        hasUser: !!user,
        hasProfile: !!profile,
        authUserEmail: session?.user?.email || null, // Email sint√©tico do Auth
        authUserId: session?.user?.id || null,
        profileEmail: profile?.email || null, // Email REAL do perfil
        profileId: profile?.id || null,
        clinicCode: profile?.clinic_code || null,
        clinicId: profile?.clinic_id || null,
        // ‚úÖ ADICIONAR: Dados que o ClinicContext precisa
        contextValues: {
          session: !!session,
          clinicId: user?.profile?.clinic_id || null,
          clinicCode: user?.profile?.clinic_code || null
        }
      });
    }
  }, [session, profile, loading, user]);

  const value = {
    user,
    session,
    loading,
    // ‚úÖ CORRIGIDO: Garantir que clinicId e clinicCode estejam sempre atualizados
    clinicId: profile?.clinic_id || user?.profile?.clinic_id || null,
    clinicCode: profile?.clinic_code || user?.profile?.clinic_code || null,
    signIn,
    signUp,
    signOut,
    forceReauth,
    refreshAuth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}